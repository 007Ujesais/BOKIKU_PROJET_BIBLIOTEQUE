-- Table LIVRES : Stocke les informations sur les livres et leurs exemplaires
CREATE TABLE LIVRES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    Titre VARCHAR(255) NOT NULL,
    Auteur VARCHAR(255) NOT NULL,
    ISBN VARCHAR(13),
    Categorie VARCHAR(100),
    Langue VARCHAR(50),
    Exemplaire VARCHAR(10) UNIQUE,
    Disponibilite ENUM('Disponible', 'Indisponible') NOT NULL
);

-- Table ADHERENTS : Stocke les informations sur les adhérents avec leur âge
CREATE TABLE ADHERENTS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    NUM_ADHERENT VARCHAR(10) UNIQUE NOT NULL,
    NOM VARCHAR(255) NOT NULL,
    PROFIL ENUM('Etudiant', 'Enseignant', 'Professionnel') NOT NULL,
    age INT NOT NULL
);

-- Table ABONNEMENTS : Gère les abonnements des adhérents
CREATE TABLE ABONNEMENTS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    NUM_ADHERENT VARCHAR(10) NOT NULL,
    DATE_DEBUT DATE NOT NULL,
    DATE_FIN DATE NOT NULL,
    VALIDITE_ABONNEMENT ENUM('OK', 'KO') NOT NULL,
    FOREIGN KEY (NUM_ADHERENT) REFERENCES ADHERENTS(NUM_ADHERENT)
);

-- Table QUOTAS : Définit les limites d'emprunt, réservation et prolongation
CREATE TABLE QUOTAS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    NUM_ADHERENT VARCHAR(10) NOT NULL,
    LIVRES_EMPRUNTES INT NOT NULL,
    JOURS_PRET INT NOT NULL,
    RESERVATION_LIVRES INT NOT NULL,
    PROLONGEMENT_PRET INT NOT NULL,
    FOREIGN KEY (NUM_ADHERENT) REFERENCES ADHERENTS(NUM_ADHERENT)
);

CREATE TABLE ADMIN (
    id SERIAL PRIMARY KEY,
    nom_utilisateur VARCHAR(50) NOT NULL,
    mot_de_passe TEXT NOT NULL
);

CREATE TYPE status_type AS ENUM ('valider', 'en_attente', 'rendu', 'refuser');

-- Table EMPRUNTS: Gère les emprunts actifs
CREATE TABLE EMPRUNTS (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NUM_ADHERENT VARCHAR(10) NOT NULL,
    Exemplaire VARCHAR(10) NOT NULL,
    DATE_EMPRUNT DATE NOT NULL,
    DATE_RETOUR_PREVUE DATE NOT NULL,
    DATE_RETOUR_REELLE DATE,
    PROLONGATIONS INTEGER DEFAULT 0,
    status status_type NOT NULL DEFAULT 'en_attente',
    FOREIGN KEY (NUM_ADHERENT) REFERENCES ADHERENTS(NUM_ADHERENT),
    FOREIGN KEY (Exemplaire) REFERENCES LIVRES(Exemplaire)
);

-- Table RESERVATIONS: Gère les réservations de livres indisponibles
CREATE TABLE RESERVATIONS (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NUM_ADHERENT VARCHAR(10) NOT NULL,
    Exemplaire VARCHAR(10) NOT NULL,
    DATE_RESERVATION DATE NOT NULL,
    status status_type NOT NULL DEFAULT 'en_attente',
    FOREIGN KEY (NUM_ADHERENT) REFERENCES ADHERENTS(NUM_ADHERENT),
    FOREIGN KEY (Exemplaire) REFERENCES LIVRES(Exemplaire)
);

-- Update initial data for EMPRUNTS

-- Insertion des données initiales pour LIVRES
INSERT INTO public.LIVRES (id, Titre, Auteur, ISBN, Categorie, Langue, Exemplaire, Disponibilite) VALUES
(1, 'Les Misérables', 'Victor Hugo', '9782070409189', 'Littérature classique', 'Français', 'MIS001', 'Disponible'),
(2, 'Les Misérables', 'Victor Hugo', '9782070409189', 'Littérature classique', 'Français', 'MIS002', 'Disponible'),
(3, 'Les Misérables', 'Victor Hugo', '9782070409189', 'Littérature classique', 'Français', 'MIS003', 'Disponible'),
(4, 'L''Étranger', 'Albert Camus', '9782070360022', 'Philosophie', 'Français', 'ETR001', 'Disponible'),
(5, 'L''Étranger', 'Albert Camus', '9782070360022', 'Philosophie', 'Français', 'ETR002', 'Disponible'),
(6, 'Harry Potter à l''école des sorciers', 'J.K. Rowling', '9782070643026', 'Jeunesse / Fantastique', 'Français', 'HAR001', 'Disponible');

-- Insertion des données initiales pour ADHERENTS (âge fictif ajouté)
INSERT INTO public.ADHERENTS (id, NUM_ADHERENT, NOM, PROFIL, age) VALUES
(1, 'ETU001', 'Amine Bensaïd', 'Etudiant', 20),
(2, 'ETU002', 'Sarah El Khattabi', 'Etudiant', 19),
(3, 'ETU003', 'Youssef Moujahid', 'Etudiant', 21),
(4, 'ENS001', 'Nadia Benali', 'Enseignant', 35),
(5, 'ENS002', 'Karim Haddadi', 'Enseignant', 40),
(6, 'ENS003', 'Salima Touhami', 'Enseignant', 38),
(7, 'PROF001', 'Rachid El Mansouri', 'Professionnel', 45),
(8, 'PROF002', 'Amina Zerouali', 'Professionnel', 42);

INSERT INTO public.EMPRUNTS (id, NUM_ADHERENT, Exemplaire, DATE_EMPRUNT, DATE_RETOUR_PREVUE, DATE_RETOUR_REELLE, PROLONGATIONS, status) VALUES
(1, 'ETU001', 'MIS001', '2025-07-01', '2025-07-06', NULL, 0, 'valider'),
(2, 'ENS001', 'ETR001', '2025-07-02', '2025-07-12', NULL, 0, 'valider');

-- Update initial data for RESERVATIONS
INSERT INTO public.RESERVATIONS (id, NUM_ADHERENT, Exemplaire, DATE_RESERVATION, status) VALUES
(1, 'ETU002', 'MIS002', '2025-07-07', 'en_attente');

-- Insertion des données initiales pour ABONNEMENTS
INSERT INTO public.ABONNEMENTS (id, NUM_ADHERENT, DATE_DEBUT, DATE_FIN, VALIDITE_ABONNEMENT) VALUES
(1, 'ETU001', '2025-01-01', '2025-12-31', 'OK'),
(2, 'ETU002', '2025-01-01', '2025-06-30', 'KO'),
(3, 'ETU003', '2025-03-01', '2025-12-31', 'OK'),
(4, 'ENS001', '2025-06-30', '2026-12-31', 'OK'),
(5, 'ENS002', '2025-08-01', '2026-06-30', 'KO'),
(6, 'ENS003', '2025-06-30', '2026-08-01', 'OK'),
(7, 'PROF001', '2025-06-01', '2025-12-31', 'OK'),
(8, 'PROF002', '2024-09-01', '2025-06-01', 'KO');

-- Insertion des données initiales pour QUOTAS
INSERT INTO public.QUOTAS (id, NUM_ADHERENT, LIVRES_EMPRUNTES, JOURS_PRET, RESERVATION_LIVRES, PROLONGEMENT_PRET) VALUES
(1, 'ETU001', 2, 5, 1, 1),
(2, 'ETU002', 2, 5, 1, 1),
(3, 'ETU003', 2, 5, 1, 1),
(4, 'ENS001', 3, 10, 2, 2),
(5, 'ENS002', 3, 10, 2, 2),
(6, 'ENS003', 3, 10, 2, 2),
(7, 'PROF001', 4, 12, 3, 3),
(8, 'PROF002', 4, 12, 3, 3);

-- Insertion des données initiales pour EMPRUNTS (exemple fictif)

INSERT INTO public.ADMIN (id, nom_utilisateur, mot_de_passe)
VALUES (1, 'admin1', '$2a$10$exampleHashedPassword12345');